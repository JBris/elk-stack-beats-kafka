version: "3.5"

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_elasticsearch"
    stop_grace_period: 60s
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - ${ELASTICSEARCH_REST_PORT}:9200
      - ${ELASTICSEARCH_NODE_PORT}:9300
    environment:
      - $ES_JAVA_OPTS
      - $DISCOVERY_TYPE
      - $BOOTSTRAP_MEMORY_LOCK
      - $ELASTICSEARCH_CLUSTER_NAME
      #- $ELASTICSEARCH_NODE_NAME_MASTER
      #- $ELASTICSEARCH_CLUSTER_INITIAL_MASTER_NODES
    labels:
      - co.elastic.logs/module=elasticsearch
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=elasticsearch
      - co.elastic.metrics/metricsets=node_stats 
      - co.elastic.metrics/hosts='elasticsearch:9200'

  kibana:
    image: docker.elastic.co/kibana/kibana:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_kibana"
    stop_grace_period: 60s
    restart: always
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
    depends_on:
      - elasticsearch
    ports:
      - ${KIBANA_PORT}:5601
    labels:
      - "traefik.http.services.${PROJECT_NAME}_kibana.loadbalancer.server.port=5601"
      - "traefik.http.routers.${PROJECT_NAME}_kibana.rule=Host(`kibana.${PROJECT_BASE_URL}`)"
      - co.elastic.logs/module=kibana
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=kibana
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='kibana:5601'

  logstash:
    image: docker.elastic.co/logstash/logstash:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_logstash"
    stop_grace_period: 60s
    restart: always
    ports:
      - ${LOGSTASH_PORT}:9600
    labels:
      - "traefik.http.services.${PROJECT_NAME}_logstash.loadbalancer.server.port=5601"
      - "traefik.http.routers.${PROJECT_NAME}_logstash.rule=Host(`logstash.${PROJECT_BASE_URL}`)"
      - co.elastic.logs/module=logstash
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=logstash
      - co.elastic.metrics/metricsets=node_stats 
      - co.elastic.metrics/hosts='logstash:9600'

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_metricbeat"
    stop_grace_period: 60s
    restart: always
    user: root
    environment:
      - $SETUP_KIBANA_HOST
      - $OUTPUT_ELASTICSEARCH_HOSTS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
    ports:
      - ${METRICBEAT_PORT}:80
    command: metricbeat -e -system.hostfs=/hostfs -strict.perms=false
    labels:
      - co.elastic.metrics/module=beat
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='metricbeat:80'

  auditbeat:
    image: docker.elastic.co/beats/auditbeat:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_auditbeat"
    stop_grace_period: 60s
    restart: always
    user: root
    cap_add:
      - AUDIT_CONTROL
      - AUDIT_READ
    pid: "host"
    environment:
      - $SETUP_KIBANA_HOST
      - $OUTPUT_ELASTICSEARCH_HOSTS
    ports:
      - ${AUDITBEAT_PORT}:80
    command: auditbeat -e -strict.perms=false
    labels:
      - co.elastic.metrics/module=beat
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='auditbeat:80'

  filebeat:
    image: docker.elastic.co/beats/filebeat:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_filebeat"
    stop_grace_period: 60s
    restart: always
    user: root
    environment:
      - $SETUP_KIBANA_HOST
      - $OUTPUT_ELASTICSEARCH_HOSTS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /private/var/log/:/var/log/host/:ro
    ports:
      - ${FILEBEAT_PORT}:80
    command: filebeat -e -strict.perms=false
    labels:
      - co.elastic.metrics/module=beat
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='filebeat:80'

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_packetbeat"
    stop_grace_period: 60s
    restart: always
    user: root
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    cap_add:
      - NET_ADMIN 
      - NET_RAW
    environment:
      - $SETUP_KIBANA_HOST
      - $OUTPUT_ELASTICSEARCH_HOSTS
    ports:
      - ${PACKETBEAT_PORT}:80
    command: packetbeat -e -strict.perms=false
    labels:
      - co.elastic.metrics/module=beat
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='packetbeat:80'

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:$ELASTICSEARCH_TAG
    container_name: "${PROJECT_NAME}_heartbeat"
    stop_grace_period: 60s
    restart: always
    user: root
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    cap_add:
      - NET_ADMIN 
      - NET_RAW
    environment:
      - $SETUP_KIBANA_HOST
      - $OUTPUT_ELASTICSEARCH_HOSTS
    ports:
      - ${HEARTBEAT_PORT}:80
    command: heartbeat -e -strict.perms=false
    labels:
      - co.elastic.metrics/module=beat
      - co.elastic.metrics/metricsets=stats 
      - co.elastic.metrics/hosts='heartbeat:80'

  # # configure_stack: #https://github.com/elastic/examples/blob/master/Miscellaneous/docker/full_stack_example/docker-compose-linux.yml
  # #   container_name: ${PROJECT_NAME}_configure_stack
  # #   image: docker.elastic.co/beats/metricbeat:${ELASTICSEARCH_TAG}
  # #   volumes:
  # #     - ./init/configure-stack.sh:/usr/local/bin/configure-stack.sh:ro
  # #     - ./init/pipelines/:/usr/local/bin/pipelines/
  # #     - ./init/templates/:/usr/local/bin/templates/
  # #   command: ['/bin/bash', '-c', 'cat /usr/local/bin/configure-stack.sh | tr -d "\r" | bash']
  # #   environment: 
  # #     ELASTIC_VERSION: ${ELASTICSEARCH_TAG}
  # #     DEFAULT_INDEX_PATTERN: $DEFAULT_INDEX_PATTERN
  # #   depends_on:
  # #     - elasticsearch
  # #     - kibana

  zookeeper:
    image: zookeeper:$ZOOKEEPER_TAG
    container_name: "${PROJECT_NAME}_zookeeper"
    ports:
      - ${ZOOKEEPER_PORT}:2181
      - ${ZOOKEEPER_ADMIN_PORT}:8080 
    labels:
      - co.elastic.metrics/module=zookeeper
      - co.elastic.metrics/metricsets=mntr 
      - co.elastic.metrics/hosts='zookeeper:2181'

  kafka:
    image: wurstmeister/kafka:$KAFKA_TAG
    container_name: "${PROJECT_NAME}_kafka"
    stop_grace_period: 60s
    restart: always
    command: [start-kafka.sh]
    ports:
      - ${KAFKA_PORT}:9092
    environment:
      KAFKA_CREATE_TOPICS: "UploadFile:1:1,GetFile:1:1,TrackUpload:1:1,GetEmailContent:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka  
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    labels:
      - co.elastic.logs/module=kafka
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=kafka
      - co.elastic.metrics/metricsets=consumergroup 
      - co.elastic.metrics/hosts='kafka:9092'

  redis:
    image: redis:$REDIS_TAG
    container_name: "${PROJECT_NAME}_redis"
    stop_grace_period: 60s
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    labels:
      - co.elastic.logs/module=redis
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=redis
      - co.elastic.metrics/metricsets=info 
      - co.elastic.metrics/hosts='redis:6379'

  adminer:
    image: adminer:$ADMINER_TAG
    container_name: "${PROJECT_NAME}_adminer"
    stop_grace_period: 60s
    restart: always
    ports:
      - ${ADMINER_PORT}:8080

  portainer:
    image: portainer/portainer:$PORTAINER_TAG
    container_name: "${PROJECT_NAME}_portainer"
    command: --no-auth -H unix:///var/run/docker.sock
    stop_grace_period: 60s
    restart: always
    ports:
      - ${PORTAINER_PORT}:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_portainer.rule=Host(`portainer.${PROJECT_BASE_URL}`)"

  traefik:
    image: traefik:$TRAEFIK_TAG
    container_name: "${PROJECT_NAME}_traefik"
    command: --api.insecure=true --providers.docker=true
    stop_grace_period: 60s
    restart: always
    ports:
      - ${TRAEFIK_PORT}:80
      - ${TRAEFIK_DASHBOARD_PORT}:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - co.elastic.logs/module=traefik
      - co.elastic.logs/fileset.stdout=access
      - co.elastic.logs/fileset.stderr=error
      - co.elastic.metrics/module=traefik
      - co.elastic.metrics/metricsets=health 
      - co.elastic.metrics/hosts='traefik:80'

networks:
  default:
      name: elk_stack_beats_kafka
